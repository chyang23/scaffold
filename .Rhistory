sapply(test_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i]),
main=evals[i],
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
}
for(i in 1:4) {
boxplot(sapply(test_error1, function(x) x[i]) - sapply(train_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i])- sapply(train_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i])- sapply(train_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i])- sapply(train_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i])- sapply(train_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i])- sapply(train_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i])- sapply(train_error6, function(x) x[i]),
main=paste("Test - Training Effor: ", evals[i]),
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
abline(h=0)
}
dev.off()
pdf("PLOTS/crs_errors_lasso_v2.pdf", height = 10, width=15)
par(mar=c(9,4,2,1), mfrow=c(2,2))
for(i in 1:4) {
boxplot(sapply(test_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i]),
main=evals[i],
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
}
for(i in 1:4) {
boxplot(sapply(test_error1, function(x) x[i]) - sapply(train_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i])- sapply(train_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i])- sapply(train_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i])- sapply(train_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i])- sapply(train_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i])- sapply(train_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i])- sapply(train_error6, function(x) x[i]),
main=paste("Test - Training Effor: ", evals[i]),
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
abline(h=0)
}
dev.off()
pdf("PLOTS/crs_errors_lasso_v2.pdf", height = 10, width=15)
par(mar=c(11,4,2,1), mfrow=c(2,2))
for(i in 1:4) {
boxplot(sapply(test_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i]),
main=evals[i],
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
}
for(i in 1:4) {
boxplot(sapply(test_error1, function(x) x[i]) - sapply(train_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i])- sapply(train_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i])- sapply(train_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i])- sapply(train_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i])- sapply(train_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i])- sapply(train_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i])- sapply(train_error6, function(x) x[i]),
main=paste("Test - Training Effor: ", evals[i]),
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
abline(h=0)
}
dev.off()
sapply(test_error3, function(x) x[i])
boxplot(sapply(test_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i]),
main=evals[i],
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
abline(median(sapply(test_error3, function(x) x[i])))
abline(h=median(sapply(test_error3, function(x) x[i])))
source("~/.active-rstudio-document", echo=TRUE)
pdf("PLOTS/crs_errors_lasso_v2.pdf", height = 15, width=15)
par(mar=c(11,4,2,1), mfrow=c(2,2))
for(i in 1:4) {
boxplot(sapply(test_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i]),
main=evals[i],
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
abline(h=median(sapply(test_error3, function(x) x[i])))
}
for(i in 1:4) {
boxplot(sapply(test_error1, function(x) x[i]) - sapply(train_error1, function(x) x[i]),
sapply(test_error7, function(x) x[i])- sapply(train_error7, function(x) x[i]),
sapply(test_error2, function(x) x[i])- sapply(train_error2, function(x) x[i]),
sapply(test_error3, function(x) x[i])- sapply(train_error3, function(x) x[i]),
sapply(test_error4, function(x) x[i])- sapply(train_error4, function(x) x[i]),
sapply(test_error5, function(x) x[i])- sapply(train_error5, function(x) x[i]),
sapply(test_error6, function(x) x[i])- sapply(train_error6, function(x) x[i]),
main=paste("Test - Training Effor: ", evals[i]),
names=c("All Variables",  "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions", "AAb Interactions"), xaxt = "n", yaxt = "n")
axis(side = 1, labels = FALSE)
axis(side = 2, las = 2, mgp = c(3, 0.75, 0))
text(x = 1:7,
y = par("usr")[3] -.01,
labels = c("All Variables", "AAb Only", "Risk Score - General", "Risk Score - Focused", "All Variables + Interactions",
"All Variables + Age Interactions",  "AAb Interactions"),
xpd = NA,
## Rotate the labels by 35 degrees.
srt = 35,
cex = 1.2,
adj=1.05)
abline(h=0)
}
dev.off()
setwd("/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CRS/")
load(file="/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CRS/RDATA/dataForAnalysis_v1.RData")
usedata_x
colnames(usedata_x)
colnames(usedata_x[,c(3,5,7:14,16:20)])
usedata_x$AAb_Freq <- as.numeric(as.character(usedata_x$AAb_Freq))
usedata_sub$Clinical_Status[usedata_sub$Clinical_Status == "FDR"] <- "Cntrl"
x_vars <- model.matrix(usedata_sub$Clinical_Status ~ ., data=usedata_x)[,-1]
y_var <- as.factor(data.frame(usedata_sub)$Clinical_Status)
train_rows <- sample(1:nrow(usedata_sub), 1*nrow(usedata_sub))
x.train <- data.matrix(x_vars[train_rows, ])
library(rpart)
dt.cntrl <- rpart.control(minsplit = 2, minbucket=1, xval=50, cp=.01)
colnames(x_vars)
colnames(usedata_x)
str(usedata_x)
setwd("/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CRS/")
load(file="/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CRS/RDATA/dataForAnalysis_v1.RData")
usedata_x <- usedata_x[,c(3,5,7:14,16:20)]
colnames(usedata_x)
str(usedata_x)
usedata_x$AAb_Freq <- as.numeric(as.character(usedata_x$AAb_Freq))
usedata_sub$Clinical_Status[usedata_sub$Clinical_Status == "FDR"] <- "Cntrl"
x_vars <- model.matrix(usedata_sub$Clinical_Status ~ ., data=usedata_x)[,-1]
y_var <- as.factor(data.frame(usedata_sub)$Clinical_Status)
library(rpart)
dt.cntrl <- rpart.control(minsplit = 2, minbucket=1, xval=50, cp=.01)
# Ignore the total AAb
test1 <- rpart(y.train ~., data=data.frame(x_vars[,-11]),
method = "class", control = dt.cntrl)
# Ignore the total AAb
test1 <- rpart(y_var ~., data=data.frame(x_vars[,-11]),
method = "class", control = dt.cntrl)
colnames(x_vars)
plot(test1)
plot(test1)
text(test1, digits = 3, use.n=TRUE, all=TRUE)
preds <- predict(test1, data.frame(x.train), type = "class")
table(Predictions=preds, True = y.train)
preds <- predict(test1, data.frame(x_vars), type = "class")
preds <- predict(test1, data.frame(x_vars), type = "class")
table(Predictions=preds, True = y_var)
min.cp <- test1$cptable[which.min(test1$cptable[,"xerror"]),"CP"]
prune1 <- prune(test1, cp= min.cp)
plot(prune1)
text(prune1, digits = 3, use.n=TRUE, all=TRUE, xpd=NA)
library(rpart.plot)
rpart.plot(prune1)
dt.cntrl <- rpart.control(minsplit = .1, minbucket=1, maxdepth=1, cp = 0)
c.cntrl <- ctree_control(mincriterion=.8, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
library(party)
dt.cntrl <- rpart.control(minsplit = .1, minbucket=1, maxdepth=1, cp = 0)
c.cntrl <- ctree_control(mincriterion=.8, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- rpart(y_var ~Trypsinogen, data=data.frame(x.train_noAAb),
method = "class", control = dt.cntrl)
test2 <- rpart(y_var ~., data=data.frame(x_vars[,-11]),
method = "class", control = dt.cntrl)
try(rpart.plot(test2))
c.cntrl <- ctree_control(mincriterion=.8, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
dt.cntrl <- rpart.control(minsplit = 2, minbucket=1, cp = 0)
test2 <- rpart(y_var ~., data=data.frame(x_vars[,-11]),
method = "class", control = dt.cntrl)
try(rpart.plot(test2))
trainset <- sample(1:nrow(x_vars), round(nrow(x_vars)*.8))
x_vars_train <- x_vars[trainset,]
y_var_train <- y_var[trainset]
x_vars_test <- x_vars[-trainset,]
y_var_test <- y_var[-trainset]
library(glmnet)
lambdas <- 10^seq(1, -10, by = -.1)
lasso_reg <- cv.glmnet(x_vars_train, y_var_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5, family = "multinomial",  type.multinomial = "grouped")
# plot(lasso_reg)
lambda_best <- lasso_reg$lambda.min
lasso_model <- glmnet(x_vars_train, y_var_train, alpha = 1, lambda = lambda_best,
standardize = TRUE, family = "multinomial",  type.multinomial = "grouped")
unlist(assess.glmnet(lasso_model,  newx = x_vars_train,  newy = y_var_train, family = c( "multinomial")))
table(predictions_train, y_var_train)
assess.glmnet(lasso_model,  newx = x_vars_train,  newy = y_var_train, family = c( "multinomial"))
# setwd("/Volumes/rbacher-2//COLLAB/DIABETES_INSTITUTE/CRS/")
load(file="RDATA/dataForAnalysis_v1.RData")
usedata_x <- usedata_x[,c(3,5,7:14,16:20)]
# Use only one adiponectin total
usedata_x <- usedata_x[,-6]
usedata_x$AAb_Freq <- as.numeric(as.character(usedata_x$AAb_Freq))
usedata_sub$Clinical_Status[usedata_sub$Clinical_Status == "FDR"] <- "Cntrl"
x_vars <- model.matrix(usedata_sub$Clinical_Status ~ ., data=usedata_x)[,-1]
y_var <- as.factor(data.frame(usedata_sub)$Clinical_Status)
x.train_noAAb <- x_vars[,c(1:9)]
only_risk <- which(usedata_sub$Clinical_Status %in% c("T1D","2AAb"))
library(rpart)
library(rpart.plot)
library(party)
## Only run this part once
dt.cntrl <- rpart.control(minsplit = 20, minbucket=15, xval=50, maxdepth=1)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
#
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 1, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Trypsinogen, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Trypsinogen, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- rpart(y_var[] ~Amylase, data=data.frame(x.train_noAAb),
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var ~ Amylase, data=data.frame(x.train_noAAb),
control = c.cntrl)
plot(test2)
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 1, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 110, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.00001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.1, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.0001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.0001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.0001, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Adiponectin_total, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- rpart(y_var[] ~Leptin, data=data.frame(x.train_noAAb),
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var ~ Leptin, data=data.frame(x.train_noAAb),
control = c.cntrl)
plot(test2)
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 1, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Leptin, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
c.cntrl <- ctree_control(mincriterion=.1, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Leptin, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- ctree(y_var[only_risk] ~ IGF1.Percentiles, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- ctree(y_var[only_risk] ~ IGF2, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
?rpart
test2
predict(test2)
rpart.plot(test2)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("singleCellTK")
library(singleCellTK)
data(package = 'singleCellTK')
sce <- importCellRanger(cellRangerDirs = system.file("extdata/", package = "singleCellTK"),
sampleDirs = "hgmm_1k_v3_20x20",sampleNames = "hgmm1kv3", dataType = "filtered")
sce
data(package = 'singleCellTK')
list.files(system.file("extdata/", package = "singleCellTK"))
sce <- importCellRanger(cellRangerDirs = system.file("extdata/", package = "singleCellTK"),
sampleDirs = "hgmm_1k_v3_20x20",sampleNames = "hgmm1kv3", dataType = "filtered")
library(singleCellTK)
install.packages("GSVAdata")
BiocManager::install("GSVAdata")
library(singleCellTK)
data(package = 'singleCellTK')
sce <- importCellRanger(cellRangerDirs = system.file("extdata/", package = "singleCellTK"),
sampleDirs = "hgmm_1k_v3_20x20",sampleNames = "hgmm1kv3", dataType = "filtered")
sce
sce <- runCellQC(sce,
algorithms = c("QCMetrics", "doubletCells", "cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX")
)
sce <- runCellQC(sce,
algorithms = c("QCMetrics", "doubletCells", "cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX")
)
sce <- runCellQC(sce,
algorithms = c("QCMetrics"))
sce <- runCellQC(sce,
algorithms = c("QCMetrics", cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX"))
sce <- runCellQC(sce,
algorithms = c("QCMetrics", "cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX"))
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
sce <- runCellQC(sce,
algorithms = c("QCMetrics"))
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics"))
sce <- runDropletQC(sce,
algorithms = c("QCMetrics"))
plotUMAP(sce, reducedDimName = "scrublet_UMAP", runUMAP = FALSE,useAssay = "logcounts")
plotUMAP(sce, reducedDimName = "scrublet_UMAP", runUMAP = TRUE,useAssay = "logcounts")
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
sce <- runDropletQC(sce,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
singleCellToolkit()
singleCellTK::singleCellToolkit()
5/14
2/7
getwd()
setwd("~/Desktop/SOFTWARE_DEVEL/scaffold/")
devtools::install)()
devtools::install()
set.seed(1231)
# Libraries
library(dplyr)
library(ggplot2)
library(scaffold)
load("~/quickoad.RData")
# this errors out (also errors out if you explicitly try to set sce = panc as the first arg)
scaffold_params <- estimateScaffoldParameters(sce=panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(-1, 1),
useDynamic = dynamic_params)
# this works
n_dyn_genes2 <- ceiling(.15 * nrow(sce))
sce=panc
# this works
n_dyn_genes2 <- ceiling(.15 * nrow(sce))
myknots2 <- matrix(runif(2 * n_dyn_genes2, 0, 1), ncol = 2, nrow = n_dyn_genes2)
mytheta2 <- matrix(rnorm(5, 5, 5), ncol = 5, nrow = n_dyn_genes2)
dynamic_params2 <- list(propGenes = 0.15,
degree = 2,
knots = myknots2,
theta = mytheta2)
scaffold_params <- estimateScaffoldParameters(sce,
sceUMI = FALSE,
useUMI = TRUE,
numCells = 100,
popHet = c(-1, 1),
useDynamic = dynamic_params)
scaffold_params
sce_sim <- simulateScaffold(scaffoldParams, sce)
sce_sim <- simulateScaffold(scaffold_params, sce)
devtools::document
devtools::document()
devtools::install()
