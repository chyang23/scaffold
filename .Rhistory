c.cntrl <- ctree_control(mincriterion=.8, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
library(party)
dt.cntrl <- rpart.control(minsplit = .1, minbucket=1, maxdepth=1, cp = 0)
c.cntrl <- ctree_control(mincriterion=.8, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- rpart(y_var ~Trypsinogen, data=data.frame(x.train_noAAb),
method = "class", control = dt.cntrl)
test2 <- rpart(y_var ~., data=data.frame(x_vars[,-11]),
method = "class", control = dt.cntrl)
try(rpart.plot(test2))
c.cntrl <- ctree_control(mincriterion=.8, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
dt.cntrl <- rpart.control(minsplit = 2, minbucket=1, cp = 0)
test2 <- rpart(y_var ~., data=data.frame(x_vars[,-11]),
method = "class", control = dt.cntrl)
try(rpart.plot(test2))
trainset <- sample(1:nrow(x_vars), round(nrow(x_vars)*.8))
x_vars_train <- x_vars[trainset,]
y_var_train <- y_var[trainset]
x_vars_test <- x_vars[-trainset,]
y_var_test <- y_var[-trainset]
library(glmnet)
lambdas <- 10^seq(1, -10, by = -.1)
lasso_reg <- cv.glmnet(x_vars_train, y_var_train, alpha = 1, lambda = lambdas, standardize = TRUE, nfolds = 5, family = "multinomial",  type.multinomial = "grouped")
# plot(lasso_reg)
lambda_best <- lasso_reg$lambda.min
lasso_model <- glmnet(x_vars_train, y_var_train, alpha = 1, lambda = lambda_best,
standardize = TRUE, family = "multinomial",  type.multinomial = "grouped")
unlist(assess.glmnet(lasso_model,  newx = x_vars_train,  newy = y_var_train, family = c( "multinomial")))
table(predictions_train, y_var_train)
assess.glmnet(lasso_model,  newx = x_vars_train,  newy = y_var_train, family = c( "multinomial"))
# setwd("/Volumes/rbacher-2//COLLAB/DIABETES_INSTITUTE/CRS/")
load(file="RDATA/dataForAnalysis_v1.RData")
usedata_x <- usedata_x[,c(3,5,7:14,16:20)]
# Use only one adiponectin total
usedata_x <- usedata_x[,-6]
usedata_x$AAb_Freq <- as.numeric(as.character(usedata_x$AAb_Freq))
usedata_sub$Clinical_Status[usedata_sub$Clinical_Status == "FDR"] <- "Cntrl"
x_vars <- model.matrix(usedata_sub$Clinical_Status ~ ., data=usedata_x)[,-1]
y_var <- as.factor(data.frame(usedata_sub)$Clinical_Status)
x.train_noAAb <- x_vars[,c(1:9)]
only_risk <- which(usedata_sub$Clinical_Status %in% c("T1D","2AAb"))
library(rpart)
library(rpart.plot)
library(party)
## Only run this part once
dt.cntrl <- rpart.control(minsplit = 20, minbucket=15, xval=50, maxdepth=1)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
#
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 1, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Trypsinogen, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Trypsinogen, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- rpart(y_var[] ~Amylase, data=data.frame(x.train_noAAb),
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var ~ Amylase, data=data.frame(x.train_noAAb),
control = c.cntrl)
plot(test2)
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 1, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 110, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.00001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.1, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.0001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Amylase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.01, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.0001, minsplit=1,minbucket=10,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
c.cntrl <- ctree_control(mincriterion=.0001, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Lipase, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
rpart.plot(test2)
test2 <- ctree(y_var[only_risk] ~ Adiponectin_total, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- rpart(y_var[] ~Leptin, data=data.frame(x.train_noAAb),
method = "class", control = dt.cntrl)
rpart.plot(test2)
test2 <- ctree(y_var ~ Leptin, data=data.frame(x.train_noAAb),
control = c.cntrl)
plot(test2)
dt.cntrl <- rpart.control(minsplit = 1,minbucket= 1, cp=0, maxdepth=3)
test2 <- rpart(y_var[only_risk] ~ Leptin, data=data.frame(x.train_noAAb)[only_risk,],
method = "class", control = dt.cntrl)
rpart.plot(test2)
c.cntrl <- ctree_control(mincriterion=.1, minsplit=1,minbucket=1,stump = TRUE,maxdepth = 1)
test2 <- ctree(y_var[only_risk] ~ Leptin, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- ctree(y_var[only_risk] ~ IGF1.Percentiles, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
test2 <- ctree(y_var[only_risk] ~ IGF2, data=data.frame(x.train_noAAb)[only_risk,],
control = c.cntrl)
plot(test2)
?rpart
test2
predict(test2)
rpart.plot(test2)
if (!requireNamespace("BiocManager", quietly=TRUE))
install.packages("BiocManager")
BiocManager::install("singleCellTK")
library(singleCellTK)
data(package = 'singleCellTK')
sce <- importCellRanger(cellRangerDirs = system.file("extdata/", package = "singleCellTK"),
sampleDirs = "hgmm_1k_v3_20x20",sampleNames = "hgmm1kv3", dataType = "filtered")
sce
data(package = 'singleCellTK')
list.files(system.file("extdata/", package = "singleCellTK"))
sce <- importCellRanger(cellRangerDirs = system.file("extdata/", package = "singleCellTK"),
sampleDirs = "hgmm_1k_v3_20x20",sampleNames = "hgmm1kv3", dataType = "filtered")
library(singleCellTK)
install.packages("GSVAdata")
BiocManager::install("GSVAdata")
library(singleCellTK)
data(package = 'singleCellTK')
sce <- importCellRanger(cellRangerDirs = system.file("extdata/", package = "singleCellTK"),
sampleDirs = "hgmm_1k_v3_20x20",sampleNames = "hgmm1kv3", dataType = "filtered")
sce
sce <- runCellQC(sce,
algorithms = c("QCMetrics", "doubletCells", "cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX")
)
sce <- runCellQC(sce,
algorithms = c("QCMetrics", "doubletCells", "cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX")
)
sce <- runCellQC(sce,
algorithms = c("QCMetrics"))
sce <- runCellQC(sce,
algorithms = c("QCMetrics", cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX"))
sce <- runCellQC(sce,
algorithms = c("QCMetrics", "cxds", "bcds",
"cxds_bcds_hybrid", "scrublet", "doubletFinder", "decontX"))
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
sce <- runCellQC(sce,
algorithms = c("QCMetrics"))
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics"))
sce <- runDropletQC(sce,
algorithms = c("QCMetrics"))
plotUMAP(sce, reducedDimName = "scrublet_UMAP", runUMAP = FALSE,useAssay = "logcounts")
plotUMAP(sce, reducedDimName = "scrublet_UMAP", runUMAP = TRUE,useAssay = "logcounts")
sce <- runDropletQC(inSCE,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
sce <- runDropletQC(sce,
algorithms = c("QCMetrics", "emptyDrops", "barcodeRanks"))
singleCellToolkit()
singleCellTK::singleCellToolkit()
5/14
2/7
setwd("~/Desktop/SOFTWARE_DEVEL/scaffold/")
devtools::install()
set.seed(1231)
# Libraries
library(dplyr)
library(ggplot2)
library(scaffold)
load("~/quickoad.RData")
n_dyn_genes <- ceiling(.15 * nrow(panc))
myknots <- matrix(runif(2 * n_dyn_genes, 0, 1), ncol = 2, nrow = n_dyn_genes)
mytheta <- matrix(rnorm(5, 10, 5), ncol = 5, nrow = n_dyn_genes)
dynamic_params <- list(propGenes = 0.15,
degree = 2,
knots = myknots,
theta = mytheta)
# this errors out (also errors out if you explicitly try to set sce = panc as the first arg)
scaffold_params <- estimateScaffoldParameters(sce=panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(-1, 1),
useDynamic = dynamic_params)
sce_sim <- simulateScaffold(scaffold_params, panc)
sce_sim
library(SingleCellExperiment)
rowData(sce_sim)
ZZ <- rownames(rowData(sce_sim))[which(rowData(sce_sim)$geneStatus == "Dynamic")] # Dynamic genes
XX <- names(sort(rowSums(counts(sce_sim) !=0), decreasing=T))[1:150] # not many zeros
Y <- intersect(ZZ, XX)
plot(counts(sce_sim)[Y[11],])
W <- setdiff(XX, ZZ)
plot(counts(sce_sim)[W[4],])
plot(counts(sce_sim)[Y[1],])
plot(counts(sce_sim)[W[2],])
head(Y)
i <- 0
i <- i+1
plot(counts(sce_sim)[Y[i],])
i <- i+1 ;plot(counts(sce_sim)[Y[i],])
i <- i+1 ;plot(counts(sce_sim)[Y[i],])
i <- i+1 ;plot(counts(sce_sim)[Y[i],])
i <- i+1 ;plot(counts(sce_sim)[Y[i],])
i <- i+1 ;plot(counts(sce_sim)[Y[i],])
i <- i+1 ;plot(counts(sce_sim)[Y[i],])
W <- setdiff(XX, ZZ)
i <- 0
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
i <- i+1 ;plot(counts(sce_sim)[W[i],])
# this errors out (also errors out if you explicitly try to set sce = panc as the first arg)
scaffold_params <- estimateScaffoldParameters(sce=panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(-1, 1),
useDynamic = NULL)
sce_sim <- simulateScaffold(scaffold_params, panc)
sce_sim
load("~/quickoad.RData")
## check without dynamic that I didn't mess things up
scaffold_params <- estimateScaffoldParameters(sce=panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(-1, 1))
sce_sim <- simulateScaffold(scaffold_params, panc)
sce=panc
sceUMI = TRUE
useUMI = TRUE
protocol = "droplet"
load("~/quickoad.RData")
## check without dynamic that I didn't mess things up
scaffold_params <- estimateScaffoldParameters(sce=panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(-1, 1))
?simulateScaffold
scaffoldParams <- scaffold_params
originalSCE = panc
inputInitial= NULL
numCells <- sum(scaffoldParams@numCells)
cellPopulation <- rep(1:length(scaffoldParams@numCells), scaffoldParams@numCells)
geneStatus <- NULL
!is.null(scaffoldParams@useDynamic[[1]])
# Simulating dynamic populations
if (!is.null(scaffoldParams@useDynamic[[1]])) {
dynamicsim <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
initialCounts <- dynamicsim[[1]]
geneStatus <- dynamicsim[[2]]
} else {
if (!is.null(scaffoldParams@usePops[[1]])) {
cellSplit <- split(1:numCells, f=cellPopulation)
allCounts <- lapply(1:length(cellSplit), function(x){
means <- scaffoldParams@geneMeans
numSamp <- length(means) * scaffoldParams@usePops$propGenes[x]
if (numSamp > 0) {
selectGenes <- sample(1:length(means), numSamp)
fc_genes <- abs(rnorm(length(selectGenes), mean = scaffoldParams@usePops$fc_mean[x], sd=scaffoldParams@usePops$fc_sd[x]))
flipfc <- sample(1:length(fc_genes), length(fc_genes) / 2)
fc_genes[flipfc] <- 1/ fc_genes[flipfc]
means[selectGenes] <- means[selectGenes] * fc_genes
}
generateCnts <- generateGeneCounts(numCells = scaffoldParams@numCells[x],
mu = means,
popHet = scaffoldParams@popHet)
rownames(generateCnts) <- scaffoldParams@genes
return(generateCnts)
})
initialCounts <- do.call(cbind, allCounts)
} else if (is.null(scaffoldParams@usePops[[1]])) {
if (is.null(inputInitial)) {
initialCounts <- generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
rownames(initialCounts) <- scaffoldParams@genes
} else {
initialCounts = inputInitial
}
}
}
source("R/initialCounts.R")
# Simulating dynamic populations
if (!is.null(scaffoldParams@useDynamic[[1]])) {
dynamicsim <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
initialCounts <- dynamicsim[[1]]
geneStatus <- dynamicsim[[2]]
} else {
if (!is.null(scaffoldParams@usePops[[1]])) {
cellSplit <- split(1:numCells, f=cellPopulation)
allCounts <- lapply(1:length(cellSplit), function(x){
means <- scaffoldParams@geneMeans
numSamp <- length(means) * scaffoldParams@usePops$propGenes[x]
if (numSamp > 0) {
selectGenes <- sample(1:length(means), numSamp)
fc_genes <- abs(rnorm(length(selectGenes), mean = scaffoldParams@usePops$fc_mean[x], sd=scaffoldParams@usePops$fc_sd[x]))
flipfc <- sample(1:length(fc_genes), length(fc_genes) / 2)
fc_genes[flipfc] <- 1/ fc_genes[flipfc]
means[selectGenes] <- means[selectGenes] * fc_genes
}
generateCnts <- generateGeneCounts(numCells = scaffoldParams@numCells[x],
mu = means,
popHet = scaffoldParams@popHet)
rownames(generateCnts) <- scaffoldParams@genes
return(generateCnts)
})
initialCounts <- do.call(cbind, allCounts)
} else if (is.null(scaffoldParams@usePops[[1]])) {
if (is.null(inputInitial)) {
initialCounts <- generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
rownames(initialCounts) <- scaffoldParams@genes
} else {
initialCounts = inputInitial
}
}
}
initialCounts[1:5,1:5]
source("R/capture.R")
source("R/amplification.R")
if (is.null(scaffoldParams@captureEfficiency)) {
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
} else {
capEfficiency <- scaffoldParams@captureEfficiency
}
source("R/estimate.R")
library(data.table)
library(Matrix)
if (is.null(scaffoldParams@captureEfficiency)) {
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
} else {
capEfficiency <- scaffoldParams@captureEfficiency
}
warningsI()
warnings()
initialCounts
Data = initialCounts
compareData = counts(originalSCE)
protocol = scaffoldParams@protocol
fromUMI = scaffoldParams@sceUMI
gdetectRate <- rowSums(Data!=0) /ncol(Data)
gdetectRate
fromUMI
Pweight <- rowMeans(Data) / nrow(Data)
Pweight
splitG <- split(Rfast::Sort(Pweight), cut(seq_along(Rfast::Sort(Pweight)), 10, labels = FALSE))
randG <- do.call(c,lapply(1:10, function(x) sample(names(splitG[[x]]), 100)))
randG
protocol
fromUMI
minFuncUMI <- function(inGuess){
tt <- pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
X = abs((1 - mean(exp(tt), na.rm=T)) - avg.detection.raw)
return(X)
}
simparm <- optimize(minFuncUMI, lower=0, upper=1, tol=1e-10)$minimum
minFuncC1 <- function(inGuess){
tt <- dbinom(0, round(inGuess*nrow(Data)), Pweight[randG], log = TRUE)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
X = abs((1 - mean(exp(tt), na.rm=T)) - avg.detection.raw)
return(X)
}
simparm <- optimize(minFuncC1, lower=0, upper=1, tol=1e-10)$minimum
simparm
minFuncUMI <- function(inGuess){
tt <- pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
X = abs((1 - mean(exp(tt), na.rm=T)) - avg.detection.raw)
return(X)
}
simparm <- optimize(minFuncUMI, lower=0, upper=1, tol=1e-10)$minimum
simparm
warnings()
inGuess <- .8
tt <- pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
X = abs((1 - mean(exp(tt), na.rm=T)) - avg.detection.raw)
Pweight[randG]
round(inGuess*nrow(Data))
pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
dbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
dbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log = TRUE)
pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = F)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
avg.detection.raw
(1 - mean(exp(tt), na.rm=T))
avg.detection.raw
inGuess <- .2
tt <- pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
(1 - mean(exp(tt), na.rm=T))
avg.detection.raw
capEfficiency
print("Finished estimating capture efficiency!")
print("Starting capture step (lysis and reverse transcription)...")
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
capEfficiency
summary(capEfficiency)
scaffoldParams@efficiencyRT
scaffoldParams@useUMI
scaffoldParams@efficiencyRT
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
captureEffCell = capEfficiency
rtEffCell = scaffoldParams@efficiencyRT
useUMI = scaffoldParams@useUMI
sce_sim <- simulateScaffold(scaffold_params, panc)
is.null(captureEffGene)
captureEffGene <- Rfast::rep_col(1, nrow(Data))
captureEffGene <- as.vector(captureEffGene)
names(captureEffGene) <- rownames(Data)
captureEffGene <- captureEffGene / sum(captureEffGene)
!is.null(rtEffCell) & is.null(rtEffGene)
rtEffGene <- Rfast::rep_col(1, nrow(Data))
rtEffGene <- as.vector(rtEffGene)
names(rtEffGene) <- rownames(Data)
rtEffGene <- rtEffGene / sum(rtEffGene)
Genes <- rownames(Data)
seq_len(ncol(Data))
x = 1
## First part is the cell lysis:
countAll <- Data[,x]
efficiencyG <- captureEffGene[names(countAll)]
geneProbs <- rep(efficiencyG, countAll)
efficiencyG
countAll
Data[1:5,1:5
Data[1:5,1:5]
capEfficiency
initialCounts
initialCounts[1:5,1:5]
!is.null(scaffoldParams@useDynamic[[1]])
!is.null(scaffoldParams@usePops[[1]])
is.null(scaffoldParams@usePops[[1]])
is.null(inputInitial)
scaffoldParams@popHet
?error
?stop
devtools::document()
