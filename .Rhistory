lapply(1:rfa_ranger$num.trees, function(i) ranger::treeInfo(rfa_ranger, tree = i) %>%
calculate_tree_depth_ranger() %>% cbind(tree = i)) %>% rbindlist()
return(list(MDA, GINI, preds.1, min_depth_frame, importance_frame, forest_list))
}
gc()
### Set directory:
# setwd("/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CLAY/IFN_Feb2024/")
## Read in data:
load(file="rdata/genoData_readyForAnalysis.Rdata")
mdata <- mdata[which(!is.na(mdata$`Age (years)`)), ]
## Transform
mdata$T1.IFN <- mdata$T1.IFN..pg.mL.
mdata$T1.IFN.sq <- sqrt(mdata$T1.IFN)
mdata$Age <- mdata$Age..years.
mdata$GroupSimple <- mdata$Group
mdata$GroupSimple[which(mdata$GroupSimple == "AAbpos1")] <- "AAbneg"
# #remove geno for now
# mdata <- mdata[,-(grep("rs[0-9]", colnames(mdata)))]
#
## Analyze using the age corrected HIP data!
load("rdata/all_quantiles_all_v6.RData")
alldata <- data.frame(all_data[,c(1:25)], do.call(cbind, quantiledata))
rm(list=setdiff(ls(), c("alldata", "mdata")))
colnames(alldata)[2] <- "Donation.ID"
intersect(colnames(mdata), colnames(alldata))
toignore <- intersect(colnames(mdata), colnames(alldata))[-1]
## Merge
mdata <- merge(mdata, alldata[,-which(colnames(alldata) %in% toignore)], by="Donation.ID")
mdata.og <- mdata
table(mdata.og$Group)
library(ranger)
library(randomForestExplainer)
library(dplyr)
library(data.table)
calculate_tree_depth_ranger <- function(frame){
frame$depth <- NA
frame$depth[1] <- 0
for(i in 2:nrow(frame)){
frame[i, "depth"] <-
frame[(!is.na(frame[, "leftChild"]) & frame[, "leftChild"] == frame[i, "nodeID"]) |
(!is.na(frame[, "rightChild"]) & frame[, "rightChild"] == frame[i, "nodeID"]), "depth"] + 1
}
return(frame)
}
mdata <- subset(mdata.og, Group %in% subGroup)
beginHIP <- which(colnames(mdata) == "B_cells_pct_of_Lymphocytes")
allgeno <- mdata[,beginHIP:ncol(mdata)]
missNum <- sort(apply(allgeno, 2, function(x) sum(is.na(x))))
for (i in 1:ncol(allgeno)) {
whichMissing <- which(is.na(allgeno[,i]))
if(length(whichMissing) > 0) {
allgeno[whichMissing,i] <- median(allgeno[,i], na.rm=T)
}
}
otherm <- mdata[,c(6,10:12,13,14,15:19, 23:24, 54, 66,69,70:75, 76:78, 85:91, 576:578)]
missNum <- sort(apply(otherm, 2, function(x) sum(is.na(x))))
try1 <- names(which(missNum <= 100))
try1 <- try1[-grep("IFN", try1)]
othervars <- mdata[,try1]
othervars$Trypsinogen..ng.mL. <- scale(as.numeric(othervars$Trypsinogen..ng.mL.))
othervars$Amylase..29.103.U.L. <- scale(as.numeric(othervars$Amylase..29.103.U.L.))
othervars$Lipase..11.82.U.L. <- scale(as.numeric(othervars$Lipase..11.82.U.L.))
othervars$IGF2 <- scale(as.numeric(othervars$IGF2))
othervars$Adiponectin.HMW <- scale(as.numeric(othervars$Adiponectin.HMW))
missNum <- sort(apply(othervars, 2, function(x) sum(is.na(x))))
othervars <- othervars[,names(which(missNum <= nrow(mdata)/4))]
for (i in 1:ncol(othervars)) {
if(is.numeric(othervars[,i]) & var(othervars[,i], na.rm=T) > 0) {
othervars[,i] <- scale(othervars[,i])
}
}
allgeno2 <- mdata[,c(grep("rs[0-9]", colnames(mdata)))]
allgeno2 <- mdata[,c(grep("rs[0-9]", colnames(mdata)))]
missNum <- sort(apply(allgeno2, 2, function(x) sum(is.na(x))), T)
allgeno2 <- allgeno2[,names(which(missNum < nrow(allgeno2)))]
dim(allgeno)
dim(allgeno2)
mdatasub <- data.frame(T1.IFN.sq=mdata$T1.IFN.sq, allgeno, othervars, allgeno2)
mdatasub <- mdatasub[complete.cases(mdatasub),]
train.rows <- sample(1:nrow(mdatasub), round(nrow(mdatasub)*.8))
test.rows <- setdiff(1:nrow(mdatasub), train.rows)
#set test set to have weight zero.
hweights <- rep(1, nrow(mdatasub))
hweights[test.rows] <- 0
rfa_ranger <- ranger(
formula = T1.IFN.sq ~ .,
data = mdatasub,
num.trees = 1000,
# mtry=50,
# max.depth = 15,
importance = "permutation",
case.weights = hweights,
# class.weights = c(1-rare.class.prevalence, rare.class.prevalence), #### set this!
holdout=TRUE)
MDA <- ranger::importance(rfa_ranger)
plot(MDA)
#plot(MDA)
rfa_ranger <- ranger(
formula = T1.IFN.sq ~ .,
data = mdatasub,
num.trees = 1000,
# mtry=50,
# max.depth = 15,
importance = "impurity",
case.weights = hweights,
# class.weights = c(1-rare.class.prevalence, rare.class.prevalence), #### set this!
holdout=TRUE)
GINI <- ranger::importance(rfa_ranger)
plot(GINI)
preds.1 <- predict(rfa_ranger, data = mdatasub[test.rows,])
preds.1 <- data.frame(TRUTH = mdatasub[test.rows,"T1.IFN.sq"], PRED = preds.1$predictions)
plot(preds.1)
cor(preds.1)
# plot(preds.1)
cor(preds.1, method="spearman")
min_depth_frame <- min_depth_distribution(rfa_ranger)
plot_min_depth_distribution(min_depth_frame)
subGroup
mdata <- subset(mdata.og, Group %in% "T1D")
#### Set RF to run only on GENOTYPES
### Set directory:
# setwd("/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CLAY/IFN_Feb2024/")
## Read in data:
load(file="rdata/genoData_readyForAnalysis.Rdata")
mdata <- mdata[which(!is.na(mdata$`Age (years)`)), ]
## Transform
mdata$T1.IFN <- mdata$T1.IFN..pg.mL.
mdata$T1.IFN.sq <- sqrt(mdata$T1.IFN)
mdata$Age <- mdata$Age..years.
mdata$GroupSimple <- mdata$Group
mdata$GroupSimple[which(mdata$GroupSimple == "AAbpos1")] <- "AAbneg"
# #remove geno for now
# mdata <- mdata[,-(grep("rs[0-9]", colnames(mdata)))]
#
## Analyze using the age corrected HIP data!
load("rdata/all_quantiles_all_v6.RData")
alldata <- data.frame(all_data[,c(1:25)], do.call(cbind, quantiledata))
rm(list=setdiff(ls(), c("alldata", "mdata")))
colnames(alldata)[2] <- "Donation.ID"
intersect(colnames(mdata), colnames(alldata))
toignore <- intersect(colnames(mdata), colnames(alldata))[-1]
## Merge
mdata <- merge(mdata, alldata[,-which(colnames(alldata) %in% toignore)], by="Donation.ID")
mdata.og <- mdata
table(mdata.og$Group)
library(ranger)
library(randomForestExplainer)
library(dplyr)
library(data.table)
## Subset random forest function
calculate_tree_depth_ranger <- function(frame){
frame$depth <- NA
frame$depth[1] <- 0
for(i in 2:nrow(frame)){
frame[i, "depth"] <-
frame[(!is.na(frame[, "leftChild"]) & frame[, "leftChild"] == frame[i, "nodeID"]) |
(!is.na(frame[, "rightChild"]) & frame[, "rightChild"] == frame[i, "nodeID"]), "depth"] + 1
}
return(frame)
}
mdata <- subset(mdata.og, Group %in% "T1D")
beginHIP <- which(colnames(mdata) == "B_cells_pct_of_Lymphocytes")
allgeno <- mdata[,beginHIP:ncol(mdata)]
missNum <- sort(apply(allgeno, 2, function(x) sum(is.na(x))))
for (i in 1:ncol(allgeno)) {
whichMissing <- which(is.na(allgeno[,i]))
if(length(whichMissing) > 0) {
allgeno[whichMissing,i] <- median(allgeno[,i], na.rm=T)
}
}
otherm <- mdata[,c(6,10:12,13,14,15:19, 23:24, 54, 66,69,70:75, 76:78, 85:91, 576:578)]
missNum <- sort(apply(otherm, 2, function(x) sum(is.na(x))))
try1 <- names(which(missNum <= 100))
try1 <- try1[-grep("IFN", try1)]
othervars <- mdata[,try1]
othervars$Trypsinogen..ng.mL. <- scale(as.numeric(othervars$Trypsinogen..ng.mL.))
othervars$Amylase..29.103.U.L. <- scale(as.numeric(othervars$Amylase..29.103.U.L.))
othervars$Lipase..11.82.U.L. <- scale(as.numeric(othervars$Lipase..11.82.U.L.))
othervars$IGF2 <- scale(as.numeric(othervars$IGF2))
othervars$Adiponectin.HMW <- scale(as.numeric(othervars$Adiponectin.HMW))
missNum <- sort(apply(othervars, 2, function(x) sum(is.na(x))))
othervars <- othervars[,names(which(missNum <= nrow(mdata)/4))]
for (i in 1:ncol(othervars)) {
if(is.numeric(othervars[,i]) & var(othervars[,i], na.rm=T) > 0) {
othervars[,i] <- scale(othervars[,i])
}
}
allgeno2 <- mdata[,c(grep("rs[0-9]", colnames(mdata)))]
missNum <- sort(apply(allgeno2, 2, function(x) sum(is.na(x))), T)
allgeno2 <- allgeno2[,names(which(missNum < nrow(allgeno2)))]
mdatasub <- data.frame(T1.IFN.sq=mdata$T1.IFN.sq, allgeno, othervars, allgeno2)
mdatasub <- mdatasub[complete.cases(mdatasub),]
dim(mdatasub)
train.rows <- sample(1:nrow(mdatasub), round(nrow(mdatasub)*.8))
test.rows <- setdiff(1:nrow(mdatasub), train.rows)
#set test set to have weight zero.
hweights <- rep(1, nrow(mdatasub))
hweights[test.rows] <- 0
rfa_ranger <- ranger(
formula = T1.IFN.sq ~ .,
data = mdatasub,
num.trees = 1000,
# mtry=50,
# max.depth = 15,
importance = "permutation",
case.weights = hweights,
# class.weights = c(1-rare.class.prevalence, rare.class.prevalence), #### set this!
holdout=TRUE)
MDA <- ranger::importance(rfa_ranger)
plot(MDA)
# plot(MDA)
rfa_ranger <- ranger(
formula = T1.IFN.sq ~ .,
data = mdatasub,
num.trees = 1000,
# mtry=50,
# max.depth = 15,
importance = "impurity",
case.weights = hweights,
# class.weights = c(1-rare.class.prevalence, rare.class.prevalence), #### set this!
holdout=TRUE)
GINI <- ranger::importance(rfa_ranger)
plot(GINI)
preds.1 <- predict(rfa_ranger, data = mdatasub[test.rows,])
preds.1 <- data.frame(TRUTH = mdatasub[test.rows,"T1.IFN.sq"], PRED = preds.1$predictions)
plot(preds.1)
cor(preds.1, method="spearman")
min_depth_frame <- min_depth_distribution(rfa_ranger)
plot_min_depth_distribution(min_depth_frame, k=)
plot_min_depth_distribution(min_depth_frame, k=20)
importance_frame <- measure_importance(rfa_ranger)
dim(importance_frame)
plot_importance_ggpairs(importance_frame)
plot_importance_rankings(importance_frame)
head(importance_frame[order(importance_frame$impurity),])
head(importance_frame)
head(importance_frame[rev(order(importance_frame$impurity)),])
head(importance_frame[rev(order(importance_frame$impurity)),], 25)
head(importance_frame[rev(order(importance_frame$impurity)),],10)
head(importance_frame[rev(order(importance_frame$impurity)),],15)
head(importance_frame[rev(order(importance_frame$impurity)),],20)
#### Set RF to run only on GENOTYPES
### Set directory:
# setwd("/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CLAY/IFN_Feb2024/")
## Read in data:
load(file="rdata/genoData_readyForAnalysis.Rdata")
mdata <- mdata[which(!is.na(mdata$`Age (years)`)), ]
## Transform
mdata$T1.IFN <- mdata$T1.IFN..pg.mL.
mdata$T1.IFN.sq <- sqrt(mdata$T1.IFN)
mdata$Age <- mdata$Age..years.
mdata$GroupSimple <- mdata$Group
mdata$GroupSimple[which(mdata$GroupSimple == "AAbpos1")] <- "AAbneg"
# #remove geno for now
# mdata <- mdata[,-(grep("rs[0-9]", colnames(mdata)))]
#
## Analyze using the age corrected HIP data!
load("rdata/all_quantiles_all_v6.RData")
alldata <- data.frame(all_data[,c(1:25)], do.call(cbind, quantiledata))
rm(list=setdiff(ls(), c("alldata", "mdata")))
colnames(alldata)[2] <- "Donation.ID"
intersect(colnames(mdata), colnames(alldata))
toignore <- intersect(colnames(mdata), colnames(alldata))[-1]
## Merge
mdata <- merge(mdata, alldata[,-which(colnames(alldata) %in% toignore)], by="Donation.ID")
mdata.og <- mdata
table(mdata.og$Group)
library(ranger)
library(randomForestExplainer)
library(dplyr)
library(data.table)
## Subset random forest function
calculate_tree_depth_ranger <- function(frame){
frame$depth <- NA
frame$depth[1] <- 0
for(i in 2:nrow(frame)){
frame[i, "depth"] <-
frame[(!is.na(frame[, "leftChild"]) & frame[, "leftChild"] == frame[i, "nodeID"]) |
(!is.na(frame[, "rightChild"]) & frame[, "rightChild"] == frame[i, "nodeID"]), "depth"] + 1
}
return(frame)
}
mdata.og$T1Group <- "High"
t1means <- tapply(mdata.og$T1.IFN.sq, mdata.og$Group, median)
mdata.og$T1Group[mdata.og$Group == "AAbneg" & mdata.og$T1.IFN.sq <= t1means["AAbneg"]] <- "Low"
mdata.og$T1Group[mdata.og$Group == "AAbpos1" & mdata.og$T1.IFN.sq <= t1means["AAbpos1"]] <- "Low"
mdata.og$T1Group[mdata.og$Group == "AAbpos2+" & mdata.og$T1.IFN.sq <= t1means["AAbpos2+"]] <- "Low"
mdata.og$T1Group[mdata.og$Group == "T1D" & mdata.og$T1.IFN.sq <= t1means["T1D"]] <- "Low"
mdata <- mdata.og
beginHIP <- which(colnames(mdata) == "B_cells_pct_of_Lymphocytes")
allgeno <- mdata[,beginHIP:ncol(mdata)]
missNum <- sort(apply(allgeno, 2, function(x) sum(is.na(x))))
for (i in 1:ncol(allgeno)) {
whichMissing <- which(is.na(allgeno[,i]))
if(length(whichMissing) > 0) {
allgeno[whichMissing,i] <- median(allgeno[,i], na.rm=T)
}
}
otherm <- mdata[,c(6,10:12,13,14,15:19, 23:24, 54, 66,69,70:75, 76:78, 85:91, 576:578)]
missNum <- sort(apply(otherm, 2, function(x) sum(is.na(x))))
try1 <- names(which(missNum <= 100))
try1 <- try1[-grep("IFN", try1)]
othervars <- mdata[,try1]
othervars$Trypsinogen..ng.mL. <- scale(as.numeric(othervars$Trypsinogen..ng.mL.))
othervars$Amylase..29.103.U.L. <- scale(as.numeric(othervars$Amylase..29.103.U.L.))
othervars$Lipase..11.82.U.L. <- scale(as.numeric(othervars$Lipase..11.82.U.L.))
othervars$IGF2 <- scale(as.numeric(othervars$IGF2))
othervars$Adiponectin.HMW <- scale(as.numeric(othervars$Adiponectin.HMW))
missNum <- sort(apply(othervars, 2, function(x) sum(is.na(x))))
othervars <- othervars[,names(which(missNum <= nrow(mdata)/4))]
for (i in 1:ncol(othervars)) {
if(is.numeric(othervars[,i]) & var(othervars[,i], na.rm=T) > 0) {
othervars[,i] <- scale(othervars[,i])
}
}
allgeno2 <- mdata[,c(grep("rs[0-9]", colnames(mdata)))]
missNum <- sort(apply(allgeno2, 2, function(x) sum(is.na(x))), T)
allgeno2 <- allgeno2[,names(which(missNum < nrow(allgeno2)))]
mdata$T1.IFN.sq
mdatasub <- data.frame(T1.IFN.sq=T1Group, allgeno, othervars, allgeno2)
mdatasub <- data.frame(T1.IFN.sq=mdata$T1Group, allgeno, othervars, allgeno2)
mdatasub <- mdatasub[complete.cases(mdatasub),]
dim(mdatasub)
table(mdatasub$T1.IFN.sq)
table(mdatasub$Group, mdatasub$T1.IFN.sq)
table(mdatasub$T1.IFN.sq)
table(mdatasub$Group, mdatasub$T1.IFN.sq)
train.rows <- sample(1:nrow(mdatasub), round(nrow(mdatasub)*.8))
test.rows <- setdiff(1:nrow(mdatasub), train.rows)
#set test set to have weight zero.
hweights <- rep(1, nrow(mdatasub))
hweights[test.rows] <- 0
mdatasub$T1.IFN.sq <- factor(mdatasub$T1.IFN.sq)
rfa_ranger <- ranger(
formula = T1.IFN.sq ~ .,
data = mdatasub,
num.trees = 1000,
# mtry=50,
# max.depth = 15,
importance = "permutation",
case.weights = hweights,
# class.weights = c(1-rare.class.prevalence, rare.class.prevalence), #### set this!
holdout=TRUE)
MDA <- ranger::importance(rfa_ranger)
plot(MDA)
rfa_ranger <- ranger(
formula = T1.IFN.sq ~ .,
data = mdatasub,
num.trees = 1000,
# mtry=50,
# max.depth = 15,
importance = "impurity",
case.weights = hweights,
# class.weights = c(1-rare.class.prevalence, rare.class.prevalence), #### set this!
holdout=TRUE)
GINI <- ranger::importance(rfa_ranger)
plot(GINI)
preds.1 <- predict(rfa_ranger, data = mdatasub[test.rows,])
preds.1 <- data.frame(TRUTH = mdatasub[test.rows,"T1.IFN.sq"], PRED = preds.1$predictions)
plot(preds.1)
cor(preds.1, method="spearman")
plot(preds.1)
preds.1
table(preds.1)
min_depth_frame <- min_depth_distribution(rfa_ranger)
plot_min_depth_distribution(min_depth_frame, k=20)
importance_frame <- measure_importance(rfa_ranger)
plot_importance_rankings(importance_frame)
head(importance_frame[rev(order(importance_frame$impurity)),],20)
### Set directory:
# setwd("/Volumes/rbacher/COLLAB/DIABETES_INSTITUTE/CLAY/IFN_Feb2024/")
## Read in data:
load(file="rdata/genoData_readyForAnalysis.Rdata")
mdata <- mdata[which(!is.na(mdata$`Age (years)`)), ]
## Transform
mdata$T1.IFN <- mdata$T1.IFN..pg.mL.
mdata$T1.IFN.sq <- sqrt(mdata$T1.IFN)
mdata$Age <- mdata$Age..years.
mdata$GroupSimple <- mdata$Group
mdata$GroupSimple[which(mdata$GroupSimple == "AAbpos1")] <- "AAbneg"
mdata.og <- mdata
table(mdata.og$Group)
library(ranger)
library(randomForestExplainer)
library(dplyr)
library(data.table)
calculate_tree_depth_ranger <- function(frame){
frame$depth <- NA
frame$depth[1] <- 0
for(i in 2:nrow(frame)){
frame[i, "depth"] <-
frame[(!is.na(frame[, "leftChild"]) & frame[, "leftChild"] == frame[i, "nodeID"]) |
(!is.na(frame[, "rightChild"]) & frame[, "rightChild"] == frame[i, "nodeID"]), "depth"] + 1
}
return(frame)
}
mdata.og$T1Group <- "High"
t1means <- tapply(mdata.og$T1.IFN.sq, mdata.og$Group, median)
mdata.og$T1Group[mdata.og$Group == "AAbneg" & mdata.og$T1.IFN.sq <= t1means["AAbneg"]] <- "Low"
mdata.og$T1Group[mdata.og$Group == "AAbpos1" & mdata.og$T1.IFN.sq <= t1means["AAbpos1"]] <- "Low"
mdata.og$T1Group[mdata.og$Group == "AAbpos2+" & mdata.og$T1.IFN.sq <= t1means["AAbpos2+"]] <- "Low"
mdata.og$T1Group[mdata.og$Group == "T1D" & mdata.og$T1.IFN.sq <= t1means["T1D"]] <- "Low"
mdata <- mdata.og
allgeno <- mdata[,c(grep("rs[0-9]", colnames(mdata)))]
dim(allgeno)
colnames(allgeno)
write.csv(colnames(allgeno), file="out/all_loci_rs.csv", quote=F, row.names = F, col.names = F)
write.csv(colnames(allgeno), file="out/all_loci_rs.csv", quote=F, row.names = F)
write.csv(colnames(allgeno), file="out/all_loci_rs.csv", quote=F, row.names = F, col.names = F)
write.csv(colnames(allgeno), file="out/all_loci_rs.csv", quote=F, row.names = F, col.names = "rsLOCI")
write.csv(LOCI=colnames(allgeno), file="out/all_loci_rs.csv", quote=F, row.names = F)
4.92+1.2+.8+1.8+.36
library(scaffold)
sce <- SingleCellExperiment(list(counts = uneq_ec_data))
sce
librarylibrary(SingleCellExperiment)
library(SingleCellExperiment)
sce <- SingleCellExperiment(list(counts = uneq_ec_data))
sce
scaffoldParams <- estimateScaffoldParameters(sce, sceUMI=FALSE, useUMI = FALSE,
protocol="C1")
scaffoldParams
sce <- SingleCellExperiment(list(counts = uneq_ec_data, norm1=NULL))
getwd()
setwd("~/Desktop/SOFTWARE_DEVEL/Scaffold/scaffold/")
library(devtools)
document()
install()
install()
install()
install(".")
library(scaffold)
# Loading the example data
data(uneq_ec_data)
library(SingleCellExperiment)
# Creating the SingleCellExperiment class object:
sce <- SingleCellExperiment(list(counts = uneq_ec_data))
sce
scaffoldParams <- estimateScaffoldParameters(sce, sceUMI=FALSE, useUMI = FALSE, protocol="C1")
sce_sim <- simulateScaffold(scaffoldParams, sce)
simcounts <- counts(sce_sim)
simcounts[1:5,1:5]
sce_sim
sce_sim@assays
sce_sim@assays@data$umi_counts
sce_sim@assays@data$initial
scaffoldParams <- estimateScaffoldParameters(sce, sceUMI = FALSE, useUMI = TRUE, protocol="C1")
sce_sim <- simulateScaffold(scaffoldParams, sce)
sce_sim
simumis <- sce_sim@assays@data$umi_counts
simumis[1:5,1:5]
simumis <- sce_sim@assays@data$initial
simumis
scaffoldParams <- estimateScaffoldParameters(sce, sceUMI=FALSE, useUMI = FALSE, protocol="C1")
sce_sim <- simulateScaffold(scaffoldParams, sce)
simcounts <- counts(sce_sim)
simcounts[1:5,1:5]
scaffoldParams <- estimateScaffoldParameters(sce, sceUMI=FALSE, useUMI = FALSE, protocol="C1")
sce_sim <- simulateScaffold(scaffoldParams, sce)
simcounts <- counts(sce_sim)
simcounts[1:5,1:5]
sce_sim <- simulateScaffold(scaffoldParams, sce,outInitial = TRUE)
simcounts <- counts(sce_sim)
simcounts[1:5,1:5]
t1 <- sce_sim@assays@data$initial
t1[1:5,1:5]
scaffoldParams
originalSCE=sce
inputInitial=NULL
outInitial=TRUE
scaffoldParams
numCells <- sum(scaffoldParams@numCells)
cellPopulation <- rep(1:length(scaffoldParams@numCells), scaffoldParams@numCells)
numCells
cellPopulation
geneStatus <- rep(NA, scaffoldParams@numGenes)
!is.null(scaffoldParams@useDynamic[[1]])
!is.null(scaffoldParams@usePops[[1]])
is.null(scaffoldParams@usePops[[1]])
is.null(inputInitial)
initialCounts <- generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
initialCounts <- scaffold::generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
initialCounts <- scaffold:::generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
rownames(initialCounts) <- scaffoldParams@genes
initialCounts[1:5,1:5]
numCells
mu = scaffoldParams@geneMeans
popHet = scaffoldParams@popHet
popHet
mu
R <- matrix(sapply(1:length(mu), function(x) stats::rpois(numCells, mu[x])), nrow = numCells)
R
R[1:5,1:5]
popHet[1]
popHet[2]
t1 <- sce_sim@assays@data$counts
t2 <- sce_sim@assays@data$initial
dim(t1)
dim(t2)
plot(t1[,1], t2[,1])
plot(t1[1,], t2[1,])
plot(runif(50, 0, 1))
plot(runif(50, 0, 1), 1)
plot(runif(50, 0, 1), runif(50, 0, 1))
plot(.5-runif(50, 0, 1), .5-runif(50, 0, 1))
plot(abs(.5-runif(50, 0, 1)), runif(50, 0, 1))
