source("~/Desktop/R/scaffold/R/amplification.R")
source("~/Desktop/R/scaffold/R/capture.R")
source("~/Desktop/R/scaffold/R/estimate.R")
source("~/Desktop/R/scaffold/R/initialCounts.R")
source("~/Desktop/R/scaffold/R/ScaffoldParamsClass.R")
source("~/Desktop/R/scaffold/R/sequencing.R")
source("~/Desktop/R/scaffold/R/simulate.R")
# Loading the example data
data(uneq_ec_data)
# Loading the example data
data(uneq_ec_data)
library(scaffold)
remotes::install_github("rhondabacher/scaffold")  # Dr. Bacher's simulation method !
install.packages("multinomRob")
data("./data/uneq_ec_data.rda")
load("./data/uneq_ec_data.rda")
devtools::document()
devtools::document()
devtools::document()
library(scaffold)
2/0.125
# Loading the example data
data(uneq_ec_data)
# Creating the SingleCellExperiment class object:
sce <- SingleCellExperiment(list(counts = uneq_ec_data))
library(SingleCellExperiment)
# Creating the SingleCellExperiment class object:
sce <- SingleCellExperiment(list(counts = uneq_ec_data))
sce
View(estimateScaffoldParameters)
panc = sce
?uneq_ec_data
dim(uneq_ec_data)
rm(panc)
ceiling(.15 * nrow(sce))
n_dyn_genes = ceiling(.15 * nrow(sce))
library(dplyr)
library(scran)
library(scater)
library(scLANE)
myknots <- matrix(runif(2 * n_dyn_genes, 0, 1), ncol = 2, nrow = n_dyn_genes)
mytheta <- matrix(rnorm(5, 5, 5), ncol = 5, nrow = n_dyn_genes)
useDynamic = list(propGenes = 0.15,
degree = 2,
knots = myknots,
theta = mytheta)
sceUMI = TRUE
useUMI = TRUE
protocol = "droplet"
numCells = 100
popHet = c(1, 1)
numGenes = 1000
.15 * 1000
geneMeans = NULL
totalTranscripts = NULL
genes = NULL
protocol = "10X"
useUMI = TRUE
popHet
geneEfficiency = NULL
captureEfficiency = NULL
efficiencyRT = NULL
typeOfAmp = "PCR"
numPreAmpCycles = 18
tagEfficiency = NULL
ampEfficiency = NULL
preAmpEfficiency = NULL
numAmpCycles = 12
equalizationAmount = 1
totalDepth = NULL
usePops = NULL
if (is.null(totalTranscripts)) totalTranscripts <- 300000
# Divide out depth before estimating the means.
scaleFactor <- Matrix::colSums(counts(sce)) / totalTranscripts
scaleData <- Matrix::t(Matrix::t(counts(sce)) / scaleFactor)
if (is.null(numCells)) {
numCells <- ncol(counts(sce))
}
if (is.null(numGenes)) {
numGenes <- nrow(counts(sce))
}
if (is.null(geneMeans)) {
Mu <- Matrix::rowMeans(scaleData)
Mu[is.na(Mu)] <- min(Mu, na.rm=T)
geneMeans <- Mu
}
head(geneMeans)
if (is.null(genes)) {
genes <- rownames(sce)
}
length(genes)
protocol <- toupper(protocol)
if (protocol=="10X") protocol <- "DROPLET"
if (protocol=="C1") protocol <- "FULLLENGTH"
protocol
if (is.null(equalizationAmount)) {
equalizationAmount <- 1 # No equalization is default
}
if (is.null(preAmpEfficiency)) {
preAmpEfficiency <- Rfast::Rnorm(sum(numCells), .95, .02)
}
if (is.null(ampEfficiency)) {
if (protocol == "FULLLENGTH")
ampEfficiency <- Rfast::Rnorm(sum(numCells), .95, .02)
else
ampEfficiency <- 0.95
}
if (is.null(tagEfficiency)) {
if (protocol == "FULLLENGTH")
tagEfficiency <- Rfast::Rnorm(sum(numCells), .95, .02)
else
tagEfficiency <- .95
}
if (!is.null(popHet)) {
if (any(popHet <= 0)) stop("The population heterogeneity parameters must be positive!")
}
if (is.null(popHet)) {
popHet <- c()
mycomb <- Rfast::comb_n(sum(numCells), 2)
lib_size <- Matrix::colSums(counts(sce))
if (sum(numCells) != length(lib_size)) {
lib_size <- sample(lib_size, sum(numCells), replace=TRUE)
}
if (sum(numCells) > 100) {
mycomb <- mycomb[,sample(seq(1,ncol(mycomb)), 100)]
}
allComb <- apply(mycomb,2,function(y) lib_size[y[1]] / lib_size[y[2]])
popHet[1] <- quantile(allComb, .05)
popHet[2] <- quantile(allComb, .95)
}
if (is.null(totalDepth)) {
totalDepth <- sum(counts(sce))
}
protocol %in% c("droplet","10X")
if (protocol %in% c("DROPLET","10X")) {
useUMI <- TRUE
}
new("ScaffoldParams",
sceUMI = sceUMI,
numCells = numCells,
numGenes = numGenes,
geneMeans = geneMeans,
totalTranscripts = totalTranscripts,
genes = genes,
protocol = protocol,
useUMI = useUMI,
popHet = popHet,
geneEfficiency = geneEfficiency,
captureEfficiency = captureEfficiency,
efficiencyRT = efficiencyRT,
typeOfAmp = typeOfAmp,
numPreAmpCycles = numPreAmpCycles,
numAmpCycles = numAmpCycles,
preAmpEfficiency = preAmpEfficiency,
ampEfficiency = ampEfficiency,
tagEfficiency = tagEfficiency,
equalizationAmount = equalizationAmount,
totalDepth = totalDepth,
usePops = usePops,
useDynamic = useDynamic)
scaffoldParams = new("ScaffoldParams",
sceUMI = sceUMI,
numCells = numCells,
numGenes = numGenes,
geneMeans = geneMeans,
totalTranscripts = totalTranscripts,
genes = genes,
protocol = protocol,
useUMI = useUMI,
popHet = popHet,
geneEfficiency = geneEfficiency,
captureEfficiency = captureEfficiency,
efficiencyRT = efficiencyRT,
typeOfAmp = typeOfAmp,
numPreAmpCycles = numPreAmpCycles,
numAmpCycles = numAmpCycles,
preAmpEfficiency = preAmpEfficiency,
ampEfficiency = ampEfficiency,
tagEfficiency = tagEfficiency,
equalizationAmount = equalizationAmount,
totalDepth = totalDepth,
usePops = usePops,
useDynamic = useDynamic)
originalSCE = sce
numCells <- sum(scaffoldParams@numCells)
numCells
cellPopulation <- rep(1:length(scaffoldParams@numCells), scaffoldParams@numCells)
geneStatus <- rep(NA, scaffoldParams@numGenes)
!is.null(scaffoldParams@useDynamic[[1]])
mu = scaffoldParams@geneMeans
dynamicParams = scaffoldParams@useDynamic
selectGenes <- sample(names(mu), ceiling(dynamicParams$propGenes*length(mu)))
otherGenes <- setdiff(names(mu), selectGenes)
length(selectGenes)
.15 * length(mu)
!all(selectGenes %in% names(mu))
dynamicParams$dynGenes = sample(names(mu), 2624)
is.null(dynamicParams$dynGenes)
if (is.null(dynamicParams$dynGenes)) {
selectGenes <- sample(names(mu), ceiling(dynamicParams$propGenes*length(mu)))
} else {
selectGenes <- dynamicParams$dynGenes
if (!all(selectGenes %in% names(mu))) { stop("Some of the proposed dynamic genes from dynamicParams are not in the SCE object.") }
}
otherGenes <- setdiff(names(mu), selectGenes)
R0 <- matrix(sapply(otherGenes, function(x) rpois(numCells, mu[x])), nrow=numCells)
if (is.null(dynamicParams$degree)) dynamicParams$degree <- 2
ngenes <- length(selectGenes)
if (is.null(dynamicParams$knots)) {
allknots <- cbind(runif(ngenes, 0, .5), runif(ngenes, .5, 1)) # Two sites of major change
} else {allknots <- dynamicParams$knots}
if (is.null(dynamicParams$theta)) {
alltheta <- matrix(rnorm(5, 5, 5), ncol=5, nrow=ngenes) # Directional Changes (num knot+degree+1)
} else {alltheta <- dynamicParams$theta}
rownames(allknots) <- selectGenes
rownames(alltheta) <- selectGenes
R1 <- sapply(selectGenes, function(x){
genpts <- sort(runif(numCells))
knots <- allknots[x,]
theta <- alltheta[x,]
theta <- sqrt(mu[x])*scale(theta, T, F) + mu[x]
theta[theta<0] <- 0
basis <- bs(x = genpts, knots = knots, degree = dynamicParams$degree,
Boundary.knots = c(0,1), intercept = TRUE)
resp <- basis %*% theta
use_dt <- data.table(xvals = genpts, yvals = resp[,1])
use_dt$yvary <- rpois(rep(1,nrow(use_dt)), use_dt$yvals)
})
library(splines)
R1 <- sapply(selectGenes, function(x){
genpts <- sort(runif(numCells))
knots <- allknots[x,]
theta <- alltheta[x,]
theta <- sqrt(mu[x])*scale(theta, T, F) + mu[x]
theta[theta<0] <- 0
basis <- bs(x = genpts, knots = knots, degree = dynamicParams$degree,
Boundary.knots = c(0,1), intercept = TRUE)
resp <- basis %*% theta
use_dt <- data.table(xvals = genpts, yvals = resp[,1])
use_dt$yvary <- rpois(rep(1,nrow(use_dt)), use_dt$yvals)
})
library(data.table)
R1 <- sapply(selectGenes, function(x){
genpts <- sort(runif(numCells))
knots <- allknots[x,]
theta <- alltheta[x,]
theta <- sqrt(mu[x])*scale(theta, T, F) + mu[x]
theta[theta<0] <- 0
basis <- bs(x = genpts, knots = knots, degree = dynamicParams$degree,
Boundary.knots = c(0,1), intercept = TRUE)
resp <- basis %*% theta
use_dt <- data.table(xvals = genpts, yvals = resp[,1])
use_dt$yvary <- rpois(rep(1,nrow(use_dt)), use_dt$yvals)
})
R <- t(cbind(R0,R1))
rownames(R) <- c(otherGenes, selectGenes)
R <- R[names(mu),] # original sort
cellPopulation <- rep("NotDynamic", length(mu))
names(cellPopulation) <- names(mu)
cellPopulation[selectGenes] <- "Dynamic"
cellPopulation[1:10]
cellPopulation %>% table()
devtools::document()
pkgload::dev_help('estimateScaffoldParameters')
devtools::install(build = TRUE, upgrade = FALSE, build_vignettes = FALSE); rstudioapi::restartSession()
library(dplyr)
library(scran)
library(scater)
library(ggplot2)
library(scaffold)
library(slingshot)
library(kableExtra)
library(SingleCellExperiment)
select <- dplyr::select
rename <- dplyr::rename
set.seed(312)
RcppZiggurat::zsetseed(312)
panc <- scRNAseq::BaronPancreasData()  # uses inDrop, a droplet-based tech
n_dyn_genes <- ceiling(.15 * nrow(panc))
myknots <- matrix(runif(2 * n_dyn_genes, 0, 1), ncol = 2, nrow = n_dyn_genes)
mytheta <- matrix(rnorm(5, 5, 5), ncol = 5, nrow = n_dyn_genes)
n_dyn_genes
possible_dyn_genes <- sample(rownames(panc), size = 3000, replace = FALSE)
.8 * 3000
n_dyn_genes <- 2400
dyn_genes <- sample(possible_dyn_genes, n_dyn_genes, replace = FALSE)
n_dyn_genes <- 2400
possible_dyn_genes <- sample(rownames(panc), size = 3000, replace = FALSE)
dyn_genes <- sample(possible_dyn_genes, n_dyn_genes, replace = FALSE)
myknots <- matrix(runif(2 * n_dyn_genes, 0, 1), ncol = 2, nrow = n_dyn_genes)
mytheta <- matrix(rnorm(5, 5, 5), ncol = 5, nrow = n_dyn_genes)
n_dyn_genes / nrow(panc)
dynamic_params <- list(propGenes = n_dyn_genes / nrow(panc),
dynGenes = dyn_genes,
degree = 2,
knots = myknots,
theta = mytheta)
scaffold_params <- estimateScaffoldParameters(sce = panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(1, 1),
useDynamic = dynamic_params)
panc_sim <- simulateScaffold(scaffoldParams = scaffold_params, originalSCE = panc)
devtools::document(); devtools::install(build = TRUE, upgrade = FALSE, build_vignettes = FALSE); rstudioapi::restartSession()
library(dplyr)
library(scran)
library(scater)
#library(scLANE)
library(ggplot2)
library(scaffold)
library(slingshot)
library(kableExtra)
library(SingleCellExperiment)
select <- dplyr::select
rename <- dplyr::rename
set.seed(312)
RcppZiggurat::zsetseed(312)
panc <- scRNAseq::BaronPancreasData()  # uses inDrop, a droplet-based tech
n_dyn_genes <- 2400
possible_dyn_genes <- sample(rownames(panc), size = 3000, replace = FALSE)
dyn_genes <- sample(possible_dyn_genes, n_dyn_genes, replace = FALSE)
myknots <- matrix(runif(2 * n_dyn_genes, 0, 1), ncol = 2, nrow = n_dyn_genes)
mytheta <- matrix(rnorm(5, 5, 5), ncol = 5, nrow = n_dyn_genes)
dynamic_params <- list(propGenes = n_dyn_genes / nrow(panc),
dynGenes = dyn_genes,
degree = 2,
knots = myknots,
theta = mytheta)
scaffold_params <- estimateScaffoldParameters(sce = panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(1, 1),
useDynamic = dynamic_params)
panc_sim <- simulateScaffold(scaffoldParams = scaffold_params, originalSCE = panc)
View(rowData(panc_sim) %>% as.data.frame())
all(dyn_genes %in% rowData(panc_sim) %>% as.data.frame() %>% pull(geneStatus))
all(dyn_genes %in% (rowData(panc_sim) %>% as.data.frame() %>% pull(geneStatus)))
dyn_genes[1:5]
length(dyn_genes)
table(rowData(panc_sim))
all(dyn_genes %in% (rowData(panc_sim) %>% as.data.frame() %>% filter(geneStatus == "Dynamic") %>% rownames(.)))
knitr::opts_chunk$set(
collapse = TRUE,
warning = FALSE,
message = FALSE,
comment = "#>"
)
library(dplyr)
library(scran)
library(scater)
#library(scLANE)
library(ggplot2)
library(scaffold)
library(slingshot)
library(kableExtra)
library(SingleCellExperiment)
select <- dplyr::select
rename <- dplyr::rename
set.seed(312)
RcppZiggurat::zsetseed(312)
panc <- scRNAseq::BaronPancreasData()  # uses inDrop, a droplet-based tech
n_dyn_genes <- 2400
possible_dyn_genes <- sample(rownames(panc), size = 3000, replace = FALSE)
dyn_genes <- sample(possible_dyn_genes, n_dyn_genes, replace = FALSE)
myknots <- matrix(runif(2 * n_dyn_genes, 0, 1), ncol = 2, nrow = n_dyn_genes)
mytheta <- matrix(rnorm(5, 5, 5), ncol = 5, nrow = n_dyn_genes)
dynamic_params <- list(propGenes = n_dyn_genes / nrow(panc),
dynGenes = dyn_genes,
degree = 2,
knots = myknots,
theta = mytheta)
scaffold_params <- estimateScaffoldParameters(sce = panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(1, 1),
useDynamic = dynamic_params)
panc_sim <- simulateScaffold(scaffoldParams = scaffold_params, originalSCE = panc)
colData(panc_sim) <- colData(panc_sim) %>%
as.data.frame() %>%
mutate(cell_time = as.numeric(gsub("Cell_", "", rownames(.))),
cell_time_normed = cell_time / max(cell_time)) %>%
DataFrame()
View((rowData(panc_sim) %>% as.data.frame()))
hist(t(counts(panc_sim))[, "A1CF"])
hist(t(counts(panc_sim))[, "AADACL3"])
summary(t(counts(panc_sim))[, "AADACL3"])
summary(t(counts(panc_sim))[, "A1CF"])
summary(t(counts(panc_sim))[, "AASDH"])
hist(t(counts(panc_sim))[, "AASDH"])
plot(colData(panc_sim)$cell_time_normed, t(counts(panc_sim))[, "AASDH"])
plot(colData(panc_sim)$cell_time_normed, t(counts(panc_sim))[, "AADACL3"])
summary(rowMeans(panc))
summary(rowMeans(counts(panc)))
length(rowMeans(counts(panc)) > 1)
sum(rowMeans(counts(panc)) > 1)
sum(rowMeans(counts(panc)) > 0.5)
sum(rowMeans(counts(panc)) > 0.25)
length(rownames(panc)[rowMeans(counts(panc)) > 0.25])
n_dyn_genes <- 2400
possible_dyn_genes <- sample(rownames(panc)[rowMeans(counts(panc)) > 0.25], size = 3000, replace = FALSE)
dyn_genes <- sample(possible_dyn_genes, n_dyn_genes, replace = FALSE)
myknots <- matrix(runif(2 * n_dyn_genes, 0, 1), ncol = 2, nrow = n_dyn_genes)
mytheta <- matrix(rnorm(5, 5, 5), ncol = 5, nrow = n_dyn_genes)
dynamic_params <- list(propGenes = n_dyn_genes / nrow(panc),
dynGenes = dyn_genes,
degree = 2,
knots = myknots,
theta = mytheta)
scaffold_params <- estimateScaffoldParameters(sce = panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(1, 1),
useDynamic = dynamic_params)
panc_sim <- simulateScaffold(scaffoldParams = scaffold_params, originalSCE = panc)
rowData(panc_sim)
head(colnames(panc_sim  ))
head(rowMeans(panc_sim))
head(counts(panc_sim  ))
head(rowSums(counts(panc_sim)))
dim(panc_sim)
2260/100
head(rowMeans(counts(panc_sim)))
head(as.data.frame(rowMeans(counts(panc_sim))))
head(data.frame(rowMeans(counts(panc_sim))))
t(counts(panc_sim)) %>%
rowSums() %>%
as.data.frame() %>%
setNames(c("total_counts")) %>%
mutate(gene = rownames(panc_sim))
counts(panc_sim) %>%
rowSums() %>%
as.data.frame() %>%
setNames(c("total_counts")) %>%
mutate(gene = rownames(panc_sim))
rowData(panc_sim) %>%
as.data.frame() %>%
mutate(gene = rownames(panc_sim)) %>%
left_join((counts(panc_sim) %>%
rowSums() %>%
as.data.frame() %>%
setNames(c("total_counts")) %>%
mutate(gene = rownames(panc_sim))),
by = "gene") %>%
with_groups(geneStatus,
summarise,
S = sum(total_counts),
N = n()) %>%
mutate(mean_exp = S / ncol(panc_sim))
rowData(panc_sim) %>%
as.data.frame() %>%
mutate(gene = rownames(panc_sim)) %>%
left_join((counts(panc_sim) %>%
rowSums() %>%
as.data.frame() %>%
setNames(c("total_counts")) %>%
mutate(gene = rownames(panc_sim))),
by = "gene") %>%
with_groups(geneStatus,
summarise,
S = sum(total_counts),
N = n()) %>%
mutate(mean_exp = (S / N) /ncol(panc_sim))
30893023 / 2400
30893023 / 2400 / 100
rowData(panc_sim) %>%
as.data.frame()
hist(t(counts(panc_sim))[, "AAMP"])
plot(colData(panc_sim)$cell_time_normed, t(counts(panc_sim))[, "AAMP"])
colData(panc_sim) <- colData(panc_sim) %>%
as.data.frame() %>%
mutate(cell_time = as.numeric(gsub("Cell_", "", rownames(.))),
cell_time_normed = cell_time / max(cell_time)) %>%
DataFrame()
plot(colData(panc_sim)$cell_time_normed, t(counts(panc_sim))[, "AAMP"])
summary(rowMeans(counts(panc)))
length(rownames(panc)[rowMeans(counts(panc)) > 0.289])
length(rownames(panc)[rowMeans(counts(panc)) > 0.03676])
quantile(rowMeans(counts(panc)))
quantile(rowMeans(counts(panc)), c(0.1:1))
quantile(rowMeans(counts(panc)), c(0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9))
length(rownames(panc)[rowMeans(counts(panc)) > 0.0727039328])
length(rownames(panc)[rowMeans(counts(panc)) > 0.1241685144])
quantile(rowMeans(counts(panc)), 0.75)
Q3 <- quantile(rowMeans(counts(panc)), 0.75)
possible_dyn_genes <- sample(rownames(panc)[rowMeans(counts(panc)) > Q3],
size = 3000,
replace = FALSE)
length(possible_dyn_genes)
length(rownames(panc)[rowMeans(counts(panc)) > Q3])
rmarkdown::pandoc_available()
