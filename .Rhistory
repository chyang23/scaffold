otherGenes <- setdiff(names(mu), selectGenes)
R0 <- matrix(sapply(otherGenes, function(x) rpois(numCells, mu[x])), nrow=numCells)
if (is.null(dynamicParams$degree)) dynamicParams$degree <- 2
ngenes <- length(selectGenes)
if (is.null(dynamicParams$knots)) {
allknots <- cbind(runif(ngenes, 0, .5), runif(ngenes, .5, 1)) # Two sites of major change
} else {allknots <- dynamicParams$knots}
if (is.null(dynamicParams$theta)) {
alltheta <- matrix(rnorm(5, 5, 5), ncol=5, nrow=ngenes) # Directional Changes (num knot+degree+1)
} else {alltheta <- dynamicParams$theta}
rownames(allknots) <- selectGenes
rownames(alltheta) <- selectGenes
R1 <- sapply(selectGenes, function(x){
genpts <- sort(runif(numCells))
knots <- allknots[x,]
theta <- alltheta[x,]
theta <- sqrt(mu[x])*scale(theta, T, F) + mu[x]
theta[theta<0] <- 0
basis <- bs(x = genpts, knots = knots, degree = dynamicParams$degree,
Boundary.knots = c(0,1), intercept = TRUE)
resp <- basis %*% theta
use_dt <- data.table(xvals = genpts, yvals = resp[,1])
use_dt$yvary <- rpois(rep(1,nrow(use_dt)), use_dt$yvals)
})
R <- t(cbind(R0,R1))
return(R)
}
initialCounts <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
rownames(initialCounts) <- scaffoldParams@genes
initialCounts <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
library(splines)
splines
initialCounts <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
library(data.table)
initialCounts <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
rownames(initialCounts) <- scaffoldParams@genes
is.null(scaffoldParams@captureEfficiency)
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
estimateCaptureEff <- function(Data, compareData, protocol, fromUMI) {
gdetectRate <- rowSums(Data!=0) /ncol(Data)
Pweight <- rowMeans(Data) / nrow(Data)
splitG <- split(Rfast::Sort(Pweight), cut(seq_along(Rfast::Sort(Pweight)), 10, labels = FALSE))
randG <- do.call(c,lapply(1:10, function(x) sample(names(splitG[[x]]), 100)))
if (protocol=="10X" | fromUMI == TRUE) {
minFuncUMI <- function(inGuess){
tt <- pbinom(1, round(inGuess*nrow(Data)), Pweight[randG], log.p = TRUE)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
X = abs((1 - mean(exp(tt), na.rm=T)) - avg.detection.raw)
return(X)
}
simparm <- optimize(minFuncUMI, lower=0, upper=1, tol=1e-10)$minimum
} else if (protocol=="C1") {
minFuncC1 <- function(inGuess){
tt <- dbinom(0, round(inGuess*nrow(Data)), Pweight[randG], log = TRUE)
avg.detection.raw = mean(Matrix::colMeans(compareData > 0))
X = abs((1 - mean(exp(tt), na.rm=T)) - avg.detection.raw)
return(X)
}
simparm <- optimize(minFuncC1, lower=0, upper=1, tol=1e-10)$minimum
}
getsd <- Matrix::colMeans(compareData != 0)
getsd <- mad(getsd, low = TRUE, constant = 1)
simparm <- c(simparm, getsd)
esteff <- abs(rnorm(ncol(Data), simparm[1], simparm[2]))
return(esteff)
}
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
library(Matrix)
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
library(SingleCellExperiment)
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
print("Finished estimating capture efficiency!")
print("Starting capture step (lysis and reverse transcription)...")
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
captureStep <- function(Data, captureEffCell = NULL, captureEffGene = NULL,
rtEffCell = NULL, rtEffGene = NULL, useUMI = FALSE){
if (is.null(captureEffGene)) {
captureEffGene <- Rfast::rep_col(1, nrow(Data))
captureEffGene <- as.vector(captureEffGene)
names(captureEffGene) <- rownames(Data)
}
captureEffGene <- captureEffGene / sum(captureEffGene)
if (!is.null(rtEffCell) & is.null(rtEffGene)) {
rtEffGene <- Rfast::rep_col(1, nrow(Data))
rtEffGene <- as.vector(rtEffGene)
names(rtEffGene) <- rownames(Data)
rtEffGene <- rtEffGene / sum(rtEffGene)
}
Genes <- rownames(Data)
capturedMolecules <- lapply(seq_len(ncol(Data)), function(x) {
## First part is the cell lysis:
countAll <- Data[,x]
efficiencyG <- captureEffGene[names(countAll)]
geneProbs <- rep(efficiencyG, countAll)
geneProbs <- geneProbs / sum(geneProbs)
allMolecules <- rep(Genes, countAll)
totalM <- abs(round(captureEffCell[x]*length(allMolecules)))
sampledM <- sample_int_rej(n = length(allMolecules), size = totalM, prob = geneProbs)
sampledM <- allMolecules[sampledM]
## Second part is the reverse transcription:
if (!is.null(rtEffCell)) {
countAll <- Rfast::Table(sampledM)
efficiencyG <- rtEffGene[names(countAll)]
geneProbs <- rep(efficiencyG, countAll)
geneProbs <- geneProbs / sum(geneProbs)
totalM <- abs(round(rtEffCell[x]*length(sampledM)))
sampledM2 <- sample_int_rej(n = length(sampledM), size = totalM, prob = geneProbs)
sampledM2 <- sampledM[sampledM2]
if (useUMI == TRUE) {
outSample <- make.unique(sampledM2, "@")
} else {
outSample <- sampledM2
}
}
if (is.null(rtEffCell)){
if (useUMI == TRUE) {
outSample <- make.unique(sampledM, "@")
} else {
outSample <- sampledM
}
}
return(outSample)
})
return(capturedMolecules)
}
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
library(wrswoR)
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
print("Finished capture step!")
scaffoldParams@protocol
scaffoldParams@protocol == "10x" || scaffoldParams@protocol == "droplet"
upper("Blaj")
toupper("Blaj")
?toupper
devtools::document
devtools::document()
devtools::document()
setwd("~/Desktop/SOFTWARE_DEVEL/scaffold/")
devtools::install()
set.seed(1231)
# Libraries
library(dplyr)
library(ggplot2)
library(scaffold)
load("~/quickoad.RData")
# this errors out (also errors out if you explicitly try to set sce = panc as the first arg)
scaffold_params <- estimateScaffoldParameters(sce=panc,
sceUMI = TRUE,
useUMI = TRUE,
protocol = "droplet",
numCells = 100,
popHet = c(-1, 1),
useDynamic = dynamic_params)
sce_sim <- simulateScaffold(scaffold_params, panc)
sce_sim
scaffoldParams
scaffoldParams = scaffold_params
originalSCE
originalSCE = panc
inputInitial=NULL
getwd()
load("R/initialCounts.R")
source("R/initialCounts.R")
numCells <- sum(scaffoldParams@numCells)
cellPopulation <- rep(1:length(scaffoldParams@numCells), scaffoldParams@numCells)
# Simulating dynamic populations
if (!is.null(scaffoldParams@useDynamic[[1]])) {
initialCounts <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
rownames(initialCounts) <- scaffoldParams@genes
} else {
if (!is.null(scaffoldParams@usePops[[1]])) {
cellSplit <- split(1:numCells, f=cellPopulation)
allCounts <- lapply(1:length(cellSplit), function(x){
means <- scaffoldParams@geneMeans
numSamp <- length(means) * scaffoldParams@usePops$propGenes[x]
if (numSamp > 0) {
selectGenes <- sample(1:length(means), numSamp)
fc_genes <- abs(rnorm(length(selectGenes), mean = scaffoldParams@usePops$fc_mean[x], sd=scaffoldParams@usePops$fc_sd[x]))
flipfc <- sample(1:length(fc_genes), length(fc_genes) / 2)
fc_genes[flipfc] <- 1/ fc_genes[flipfc]
means[selectGenes] <- means[selectGenes] * fc_genes
}
generateCnts <- generateGeneCounts(numCells = scaffoldParams@numCells[x],
mu = means,
popHet = scaffoldParams@popHet)
rownames(generateCnts) <- scaffoldParams@genes
return(generateCnts)
})
initialCounts <- do.call(cbind, allCounts)
} else if (is.null(scaffoldParams@usePops[[1]])) {
if (is.null(inputInitial)) {
initialCounts <- generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
rownames(initialCounts) <- scaffoldParams@genes
} else {
initialCounts = inputInitial
}
}
}
library(splines)
# Simulating dynamic populations
if (!is.null(scaffoldParams@useDynamic[[1]])) {
initialCounts <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
rownames(initialCounts) <- scaffoldParams@genes
} else {
if (!is.null(scaffoldParams@usePops[[1]])) {
cellSplit <- split(1:numCells, f=cellPopulation)
allCounts <- lapply(1:length(cellSplit), function(x){
means <- scaffoldParams@geneMeans
numSamp <- length(means) * scaffoldParams@usePops$propGenes[x]
if (numSamp > 0) {
selectGenes <- sample(1:length(means), numSamp)
fc_genes <- abs(rnorm(length(selectGenes), mean = scaffoldParams@usePops$fc_mean[x], sd=scaffoldParams@usePops$fc_sd[x]))
flipfc <- sample(1:length(fc_genes), length(fc_genes) / 2)
fc_genes[flipfc] <- 1/ fc_genes[flipfc]
means[selectGenes] <- means[selectGenes] * fc_genes
}
generateCnts <- generateGeneCounts(numCells = scaffoldParams@numCells[x],
mu = means,
popHet = scaffoldParams@popHet)
rownames(generateCnts) <- scaffoldParams@genes
return(generateCnts)
})
initialCounts <- do.call(cbind, allCounts)
} else if (is.null(scaffoldParams@usePops[[1]])) {
if (is.null(inputInitial)) {
initialCounts <- generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
rownames(initialCounts) <- scaffoldParams@genes
} else {
initialCounts = inputInitial
}
}
}
library(data.table)
# Simulating dynamic populations
if (!is.null(scaffoldParams@useDynamic[[1]])) {
initialCounts <- generateDynamicGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
dynamicParams = scaffoldParams@useDynamic)
rownames(initialCounts) <- scaffoldParams@genes
} else {
if (!is.null(scaffoldParams@usePops[[1]])) {
cellSplit <- split(1:numCells, f=cellPopulation)
allCounts <- lapply(1:length(cellSplit), function(x){
means <- scaffoldParams@geneMeans
numSamp <- length(means) * scaffoldParams@usePops$propGenes[x]
if (numSamp > 0) {
selectGenes <- sample(1:length(means), numSamp)
fc_genes <- abs(rnorm(length(selectGenes), mean = scaffoldParams@usePops$fc_mean[x], sd=scaffoldParams@usePops$fc_sd[x]))
flipfc <- sample(1:length(fc_genes), length(fc_genes) / 2)
fc_genes[flipfc] <- 1/ fc_genes[flipfc]
means[selectGenes] <- means[selectGenes] * fc_genes
}
generateCnts <- generateGeneCounts(numCells = scaffoldParams@numCells[x],
mu = means,
popHet = scaffoldParams@popHet)
rownames(generateCnts) <- scaffoldParams@genes
return(generateCnts)
})
initialCounts <- do.call(cbind, allCounts)
} else if (is.null(scaffoldParams@usePops[[1]])) {
if (is.null(inputInitial)) {
initialCounts <- generateGeneCounts(numCells = numCells,
mu = scaffoldParams@geneMeans,
popHet = scaffoldParams@popHet)
rownames(initialCounts) <- scaffoldParams@genes
} else {
initialCounts = inputInitial
}
}
}
if (is.null(scaffoldParams@captureEfficiency)) {
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
} else {
capEfficiency <- scaffoldParams@captureEfficiency
}
source("R/estimate.R")
if (is.null(scaffoldParams@captureEfficiency)) {
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
} else {
capEfficiency <- scaffoldParams@captureEfficiency
}
library(Matrix)
if (is.null(scaffoldParams@captureEfficiency)) {
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
} else {
capEfficiency <- scaffoldParams@captureEfficiency
}
print("Finished estimating capture efficiency!")
print("Starting capture step (lysis and reverse transcription)...")
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
library(wrswoR)
source("R/capture.R")
print("Starting capture step (lysis and reverse transcription)...")
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
capEfficiency
is.null(scaffoldParams@captureEfficiency)
if (is.null(scaffoldParams@captureEfficiency)) {
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
} else {
capEfficiency <- scaffoldParams@captureEfficiency
}
library(SingleCellExperiment)
if (is.null(scaffoldParams@captureEfficiency)) {
print("Estimating capture efficiency...")
capEfficiency <- estimateCaptureEff(Data = initialCounts,
compareData = counts(originalSCE),
protocol = scaffoldParams@protocol,
fromUMI = scaffoldParams@sceUMI)
} else {
capEfficiency <- scaffoldParams@captureEfficiency
}
print("Finished estimating capture efficiency!")
print("Starting capture step (lysis and reverse transcription)...")
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
print("Finished capture step!")
scaffoldParams@protocol
if (scaffoldParams@protocol == "FULLLENGTH") {
print("Starting preamplify step...")
amplifiedMolecules <- preamplifyStep(capturedMolecules = capturedMolecules,
genes = scaffoldParams@genes,
efficiencyPCR = scaffoldParams@preAmpEfficiency,
rounds = scaffoldParams@numPreAmpCycles,
typeAMP = scaffoldParams@typeOfAmp,
useUMI = scaffoldParams@useUMI)
print("Finished preamplify!")
print("Starting library prep and sequencing...")
finalCounts <- sequenceStepC1(amplifiedMolecules=amplifiedMolecules,
equalizationAmount = scaffoldParams@equalizationAmount,
totalDepth = scaffoldParams@totalDepth,
efficiencyPCR = scaffoldParams@ampEfficiency,
roundsPCR = scaffoldParams@numAmpCycles,
efficiencyTag = scaffoldParams@tagEfficiency,
genes = scaffoldParams@genes,
useUMI = scaffoldParams@useUMI)
print("Finished sequencing and data formatting!")
if(is.null(finalCounts$umi_counts)) {
finalCounts$umi_counts <- matrix(NA, nrow=nrow(finalCounts$counts), ncol=ncol(finalCounts$counts))
}
returnsce <- SingleCellExperiment(assays = list(counts = finalCounts$counts, umi_counts=finalCounts$umi_counts),
metadata = list(initialSimCounts = initialCounts),
colData = data.frame(capEfficiency = capEfficiency, cellPopulation = factor(cellPopulation)))
}
print("Starting library prep and sequencing...")
finalCounts <- sequenceStep10X(capturedMolecules,
totalDepth = scaffoldParams@totalSD,
efficiencyPCR = scaffoldParams@ampEfficiency,
roundsPCR = scaffoldParams@numAmpCycles,
genes = scaffoldParams@genes,
efficiencyTag = scaffoldParams@tagEfficiency,
useUMI = scaffoldParams@useUMI)
source("R/sequencing.R")
print("Starting library prep and sequencing...")
finalCounts <- sequenceStep10X(capturedMolecules,
totalDepth = scaffoldParams@totalSD,
efficiencyPCR = scaffoldParams@ampEfficiency,
roundsPCR = scaffoldParams@numAmpCycles,
genes = scaffoldParams@genes,
efficiencyTag = scaffoldParams@tagEfficiency,
useUMI = scaffoldParams@useUMI)
source("R/amplification.R")
print("Starting library prep and sequencing...")
finalCounts <- sequenceStep10X(capturedMolecules,
totalDepth = scaffoldParams@totalSD,
efficiencyPCR = scaffoldParams@ampEfficiency,
roundsPCR = scaffoldParams@numAmpCycles,
genes = scaffoldParams@genes,
efficiencyTag = scaffoldParams@tagEfficiency,
useUMI = scaffoldParams@useUMI)
amplifiedMolecules=capturedMolecules
capturedMolecules
totalDepth = scaffoldParams@totalSD
efficiencyPCR = scaffoldParams@ampEfficiency
roundsPCR = scaffoldParams@numAmpCycles
genes = scaffoldParams@genes
efficiencyTag = scaffoldParams@tagEfficiency
useUMI = scaffoldParams@useUMI
useUMI
print("Rearranging 10X data")
numCells <- length(capturedMolecules)
label_capturedMolecules <- lapply(1:length(capturedMolecules), function(x) stringi::stri_c(capturedMolecules[[x]], x, sep="__"))
label_capturedMolecules
tab_capturedMolecules <- lapply(label_capturedMolecules, function(y) {
easyY <- Rfast::rep_row(1, length(y))
rownames(easyY) <- y
return(easyY)
})
rm(capturedMolecules)
# Now everything is combined and PCR amp:
longVectorCounts <- unlist(tab_capturedMolecules)
names(longVectorCounts) <- do.call(c, label_capturedMolecules)
amplifiedMolecules <- amplifyStep(longVectorCounts, genes = genes, efficiencyPCR, roundsPCR, protocol = "10X")
rm(longVectorCounts)
# Now a fragmentation step happens:
geneProbs_all <- Rfast::Log(amplifiedMolecules / sum(amplifiedMolecules))
names(geneProbs_all) <- names(amplifiedMolecules)
totalT <- round(efficiencyTag*sum(amplifiedMolecules))
if(totalT > .Machine$integer.max) totalT <- .Machine$integer.max
tagdM <- try(rmultinom(n=1, size=totalT, prob=exp(geneProbs_all)), silent=T)
fragments <- as.vector(tagdM)
names(fragments) <- rownames(tagdM)
rm(amplifiedMolecules)
# Now we sequence:
geneProbs_all <- Rfast::Log(fragments / sum(fragments))
names(geneProbs_all) <- names(fragments)
counts <- try(rmultinom(n=1, size=totalDepth, prob=exp(geneProbs_all)), silent=T)
## Split matrix into nicer output:
print(paste0("Processing output for ", numCells ," cells."))
cnt_split <- unlist(strsplit(rownames(counts), split="__", fixed=TRUE))
rownames(counts)
counts <- try(rmultinom(n=1, size=totalDepth, prob=exp(geneProbs_all)), silent=T)
counts
totalDepth
totalDepth
scaffoldParams@totalSD
scaffoldParams
finalCounts <- sequenceStep10X(capturedMolecules,
totalDepth = scaffoldParams@totalDepth,
efficiencyPCR = scaffoldParams@ampEfficiency,
roundsPCR = scaffoldParams@numAmpCycles,
genes = scaffoldParams@genes,
efficiencyTag = scaffoldParams@tagEfficiency,
useUMI = scaffoldParams@useUMI)
capturedMolecules
capturedMolecules <- captureStep(round(initialCounts),
captureEffCell = capEfficiency,
rtEffCell = scaffoldParams@efficiencyRT,
useUMI = scaffoldParams@useUMI)
print("Finished capture step!")
print("Starting library prep and sequencing...")
finalCounts <- sequenceStep10X(capturedMolecules,
totalDepth = scaffoldParams@totalDepth,
efficiencyPCR = scaffoldParams@ampEfficiency,
roundsPCR = scaffoldParams@numAmpCycles,
genes = scaffoldParams@genes,
efficiencyTag = scaffoldParams@tagEfficiency,
useUMI = scaffoldParams@useUMI)
print("Finished sequencing and data formatting!")
returnsce <- SingleCellExperiment(assays = list(counts = finalCounts$counts, umi_counts=finalCounts$umi_counts),
metadata = list(initialSimCounts = initialCounts),
colData = data.frame(capEfficiency = capEfficiency, cellPopulation = factor(cellPopulation)))
returnsce
devtools::document
devtools::document()
devtools::document()
